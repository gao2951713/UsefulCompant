<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd 
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee.xsd">

	<!-- 配置数据源 -->
	<context:property-placeholder location="/WEB-INF/classes/db.properties" />
	<!-- c3p0数据库连接池 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<!-- 数据库连接 -->
		<property name="jdbcUrl" value="${db.url}"></property>
		<property name="driverClass" value="${db.driverClassName}"></property>
		<property name="user" value="${db.username}"></property>
		<property name="password" value="${db.password}"></property>

		<!-- c3p0 配置 -->
		<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
		<property name="acquireIncrement" value="3" />
		<!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->
		<property name="acquireRetryAttempts" value="30" />
		<property name="acquireRetryDelay" value="1000" />
		<property name="autoCommitOnClose" value="false" />
		<!--获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。 但是数据源仍有效 保留，并在下次调用getConnection()的时候继续尝试获取连接。 
			如果设为true，那么在尝试获取连接失败后该数据源将申明已断开并永久关闭。 Default: false -->
		<property name="breakAfterAcquireFailure" value="false" />
		<property name="checkoutTimeout" value="5000" />
		<!--每60秒检查所有连接池中的空闲连接。Default: 0 -->
		<property name="idleConnectionTestPeriod" value="60" />
		<!--初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。 Default: 3 -->
		<property name="initialPoolSize" value="10" />
		<property name="loginTimeout" value="1800" />
		<!--连接池中保留的最小连接数。 -->
		<property name="minPoolSize" value="5" />
		<!--连接池中保留的最大连接数。 Default: 15 -->
		<property name="maxPoolSize" value="15" />
		<!--最大空闲时间,60秒内未使用则连接被丢弃。 若为0则永不丢弃。 Default: 0 -->
		<property name="maxIdleTime" value="60" />
		<property name="maxStatements" value="100" />
		<!--JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。 但由于预缓存的statements 属于单个connection而不是整个连接池。 
			所以设置这个参数需要考虑到多方面的因素。 如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。 
			Default: 0 -->
		<property name="maxStatementsPerConnection" value="100" />
		<property name="numHelperThreads" value="3" />
		<property name="propertyCycle" value="300" />
		<property name="preferredTestQuery" value="true" />
		<property name="testConnectionOnCheckin" value="true" />
		<!--因性能消耗大请只在需要的时候使用它。 如果设为true那么在每个connection提交的 时候都将校验其有效性。 建议使用idleConnectionTestPeriod或automaticTestTable等方法来提升连接测试的性能。 
			Default: false -->
		<property name="testConnectionOnCheckout" value="false" />
		<property name="usesTraditionalReflectiveProxies" value="false" />
	</bean>
	<!-- 配置数据源结束 -->

	<!-- 支持aop注解 -->
	<aop:aspectj-autoproxy />
	
	<!-- 配置session工厂 -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<!-- 引用的数据湖 -->
		<property name="dataSource" ref="dataSource" />
		<property name="hibernateProperties">
			<props>
				<!-- 方言 -->
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
				<!-- session -->
				<prop key="hibernate.current_session_context_class">org.springframework.orm.hibernate4.SpringSessionContext
				</prop>
				<!-- 后台输出SQL语句 -->
				<prop key="hibernate.show_sql">true</prop>
				<!-- 后台输出SQL语句时格式化 -->
				<prop key="hibernate.format_sql">false</prop>
				<!-- 数据库表的操作 -->
				<prop key="hibernate.hbm2ddl.auto">none</prop>
				<!-- javax.persistence.validation.mode默认情况下是auto的， 就是说如果不设置的话它是会自动去你的classpath下面找一个bean-validation**包 
					所以把它设置为none即可 -->
				<prop key="javax.persistence.validation.mode">none</prop>
			</props>
		</property>
		<!-- 自动扫描的包 -->
		<property name="packagesToScan" value="com.ibest.entity.*.pojo" />
	</bean>
	<!-- hibernate4 事务管理 -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- 事务执行方式 REQUIRED：指定当前方法必需在事务环境中运行，如果当前有事务环境就加入当前正在执行的事务环境， 如果当前没有事务，就新建一个事务，这是默认值。 -->
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="del*" propagation="REQUIRED" />
			<tx:method name="import*" propagation="REQUIRED" />
			<tx:method name="find*" propagation="REQUIRED" />
			<!-- 指定当前方法以非事务方式执行操作，如果当前存在事务，就把当前事务挂起，等我以非事务的状态运行完，再继续原来的事务。 查询定义即可，read-only="true" 
				表示只读 -->
			<tx:method name="*" propagation="NOT_SUPPORTED" read-only="true" />
		</tx:attributes>
	</tx:advice>

	<!-- 定义切面，在"* com.*.service.*Service.*(..)"中执行有关的hibernate session的事务操作 -->
	<aop:config>
		<aop:pointcut id="serviceOperation"
			expression="execution(* com.*.service.*Service.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="serviceOperation" />
	</aop:config>
</beans>